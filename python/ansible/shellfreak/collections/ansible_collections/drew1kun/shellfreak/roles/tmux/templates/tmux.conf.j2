#jinja2: lstrip_blocks: "True"
# base index
set -g base-index 1
set-option -g history-limit 50000   # Default is 2000

# Enable mouse mode:
set -g mouse on

# enable 256-colors
#set -g default-terminal "screen-256color"

# Reload config with 'Ctr+B' and then 'r':
bind 'r' source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."
bind 'R' source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

# screen like behaviour:
bind '^k' confirm-before -p "kill-window #S? (y/n)" kill-window

# Split windows:
bind '|' split-window -h
bind '_' split-window -v

# rotate
bind '^r' rotate-window -D

# set window notifications
set -g monitor-activity on
set -g visual-activity on

# automatically set window title
set -g automatic-rename on

# toggle synchronization
bind 'e' setw synchronize-panes on
bind 'E' setw synchronize-panes off

#============================= VI mode =============================
# e.g.: in command mode (prefix then `:`) press `Esc` and use `H` and `L` to move left and right):
# Usage: https://unix.stackexchange.com/questions/131011/use-system-clipboard-in-vi-copy-mode-in-tmux
{% if tmux_version.stdout|float >= 2.3 %}
#======================== tmux >= 2.3 ==============================
# Enable vi mode:
set -g mode-keys vi

# 'v' key for selection:
bind -T copy-mode-vi 'v' send -X begin-selection
    {% if 'Darwin' in ansible_os_family %}
# Send selection (including mouse-selection) to clipobard:
# MacOS:
bind -T copy-mode-vi 'y' send-keys -X copy-selection-and-cancel
    {% else %}
# Linux:
bind -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"
    {% endif %}
#======================= tmux >= 2.3 - END =========================
{% else %}
#========================= tmux < 2.3 ==============================
# tmux < 2.3:
# Enable vi mode
set -g @shell_mode 'vi'

# 'v' key for selection:
bind -t vi-copy 'v' begin-selection
    {% if 'Darwin' in ansible_os_family %}
# Send selection (including mouse-selection) to clipobard:
# MacOS:
bind -t vi-copy 'y' copy-pipe 'pbcopy -in -selection clipboard'
    {% else %}
# Linux:
bind -t vi-copy 'y' copy-pipe 'xclip -in -selection clipboard'
    {% endif %}
#======================== tmux < 2.3 - END =========================
{% endif %}
# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind 'h' select-pane -L
bind 'j' select-pane -D
bind 'k' select-pane -U
bind 'l' select-pane -R

# resize panes like vim
# feel free to change the "2" to however many lines you want to resize by,
# only 1 at a time can be slow
bind '<' resize-pane -L 2
bind '>' resize-pane -R 2
bind '-' resize-pane -D 2
bind '+' resize-pane -U 2
#========================== VI mode - END ==========================

#======================= TMUX PLUGIN MANAGER =======================
# Automatically install tmux plugin manager on new tmux installation
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# list of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-resurrect'

# initialize tmux plugin manager
run '~/.tmux/plugins/tpm/tpm'
#==================== TMUX PLUGIN MANAGER - END ====================

#============================ TMUXLINE =============================
# tmux-line snapshot: check file exists before sourcing it
if-shell "test -f ~/tmuxline.snapshot" "source ~/tmuxline.snapshot"
#========================= TMUXLINE - END ==========================
